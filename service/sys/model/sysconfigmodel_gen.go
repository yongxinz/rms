// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysConfigFieldNames          = builder.RawFieldNames(&SysConfig{})
	sysConfigRows                = strings.Join(sysConfigFieldNames, ",")
	sysConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(sysConfigFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	sysConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(sysConfigFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"

	cacheSysConfigIdPrefix = "cache:sysConfig:id:"
)

type (
	sysConfigModel interface {
		Insert(ctx context.Context, data *SysConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysConfig, error)
		Update(ctx context.Context, data *SysConfig) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysConfigModel struct {
		sqlc.CachedConn
		table string
	}

	SysConfig struct {
		Id          int64     `db:"id"`           // 主键编码
		ConfigName  string    `db:"config_name"`  // ConfigName
		ConfigKey   string    `db:"config_key"`   // ConfigKey
		ConfigValue string    `db:"config_value"` // ConfigValue
		ConfigType  int64     `db:"config_type"`  // ConfigType
		IsFrontend  int64     `db:"is_frontend"`  // 是否前台
		Remark      string    `db:"remark"`       // Remark
		CreateBy    int64     `db:"create_by"`    // 创建者
		UpdateBy    int64     `db:"update_by"`    // 更新者
		CreatedAt   time.Time `db:"created_at"`   // 创建时间
		UpdatedAt   time.Time `db:"updated_at"`   // 更新时间
	}
)

func newSysConfigModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysConfigModel {
	return &defaultSysConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_config`",
	}
}

func (m *defaultSysConfigModel) Delete(ctx context.Context, id int64) error {
	sysConfigIdKey := fmt.Sprintf("%s%v", cacheSysConfigIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, sysConfigIdKey)
	return err
}

func (m *defaultSysConfigModel) FindOne(ctx context.Context, id int64) (*SysConfig, error) {
	sysConfigIdKey := fmt.Sprintf("%s%v", cacheSysConfigIdPrefix, id)
	var resp SysConfig
	err := m.QueryRowCtx(ctx, &resp, sysConfigIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysConfigModel) Insert(ctx context.Context, data *SysConfig) (sql.Result, error) {
	sysConfigIdKey := fmt.Sprintf("%s%v", cacheSysConfigIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysConfigRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ConfigName, data.ConfigKey, data.ConfigValue, data.ConfigType, data.IsFrontend, data.Remark, data.CreateBy, data.UpdateBy)
	}, sysConfigIdKey)
	return ret, err
}

func (m *defaultSysConfigModel) Update(ctx context.Context, data *SysConfig) error {
	sysConfigIdKey := fmt.Sprintf("%s%v", cacheSysConfigIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysConfigRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ConfigName, data.ConfigKey, data.ConfigValue, data.ConfigType, data.IsFrontend, data.Remark, data.CreateBy, data.UpdateBy, data.Id)
	}, sysConfigIdKey)
	return err
}

func (m *defaultSysConfigModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSysConfigIdPrefix, primary)
}

func (m *defaultSysConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysConfigModel) tableName() string {
	return m.table
}
