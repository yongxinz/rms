// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysDictDataFieldNames          = builder.RawFieldNames(&SysDictData{})
	sysDictDataRows                = strings.Join(sysDictDataFieldNames, ",")
	sysDictDataRowsExpectAutoSet   = strings.Join(stringx.Remove(sysDictDataFieldNames, "`dict_code`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	sysDictDataRowsWithPlaceHolder = strings.Join(stringx.Remove(sysDictDataFieldNames, "`dict_code`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheSysDictDataDictCodePrefix = "cache:sysDictData:dictCode:"
)

type (
	sysDictDataModel interface {
		Insert(ctx context.Context, data *SysDictData) (sql.Result, error)
		FindOne(ctx context.Context, dictCode int64) (*SysDictData, error)
		Update(ctx context.Context, data *SysDictData) error
		Delete(ctx context.Context, dictCode int64) error
	}

	defaultSysDictDataModel struct {
		sqlc.CachedConn
		table string
	}

	SysDictData struct {
		DictCode  int64          `db:"dict_code"`
		DictSort  sql.NullInt64  `db:"dict_sort"`
		DictLabel sql.NullString `db:"dict_label"`
		DictValue sql.NullString `db:"dict_value"`
		DictType  sql.NullString `db:"dict_type"`
		CssClass  sql.NullString `db:"css_class"`
		ListClass sql.NullString `db:"list_class"`
		IsDefault sql.NullString `db:"is_default"`
		Status    sql.NullInt64  `db:"status"`
		Default   sql.NullString `db:"default"`
		Remark    sql.NullString `db:"remark"`
		CreateBy  sql.NullInt64  `db:"create_by"`  // 创建者
		UpdateBy  sql.NullInt64  `db:"update_by"`  // 更新者
		CreatedAt sql.NullTime   `db:"created_at"` // 创建时间
		UpdatedAt sql.NullTime   `db:"updated_at"` // 最后更新时间
		DeletedAt sql.NullTime   `db:"deleted_at"` // 删除时间
	}
)

func newSysDictDataModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysDictDataModel {
	return &defaultSysDictDataModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_dict_data`",
	}
}

func (m *defaultSysDictDataModel) Delete(ctx context.Context, dictCode int64) error {
	sysDictDataDictCodeKey := fmt.Sprintf("%s%v", cacheSysDictDataDictCodePrefix, dictCode)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `dict_code` = ?", m.table)
		return conn.ExecCtx(ctx, query, dictCode)
	}, sysDictDataDictCodeKey)
	return err
}

func (m *defaultSysDictDataModel) FindOne(ctx context.Context, dictCode int64) (*SysDictData, error) {
	sysDictDataDictCodeKey := fmt.Sprintf("%s%v", cacheSysDictDataDictCodePrefix, dictCode)
	var resp SysDictData
	err := m.QueryRowCtx(ctx, &resp, sysDictDataDictCodeKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `dict_code` = ? limit 1", sysDictDataRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dictCode)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysDictDataModel) Insert(ctx context.Context, data *SysDictData) (sql.Result, error) {
	sysDictDataDictCodeKey := fmt.Sprintf("%s%v", cacheSysDictDataDictCodePrefix, data.DictCode)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysDictDataRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DictSort, data.DictLabel, data.DictValue, data.DictType, data.CssClass, data.ListClass, data.IsDefault, data.Status, data.Default, data.Remark, data.CreateBy, data.UpdateBy, data.DeletedAt)
	}, sysDictDataDictCodeKey)
	return ret, err
}

func (m *defaultSysDictDataModel) Update(ctx context.Context, data *SysDictData) error {
	sysDictDataDictCodeKey := fmt.Sprintf("%s%v", cacheSysDictDataDictCodePrefix, data.DictCode)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `dict_code` = ?", m.table, sysDictDataRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DictSort, data.DictLabel, data.DictValue, data.DictType, data.CssClass, data.ListClass, data.IsDefault, data.Status, data.Default, data.Remark, data.CreateBy, data.UpdateBy, data.DeletedAt, data.DictCode)
	}, sysDictDataDictCodeKey)
	return err
}

func (m *defaultSysDictDataModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSysDictDataDictCodePrefix, primary)
}

func (m *defaultSysDictDataModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `dict_code` = ? limit 1", sysDictDataRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysDictDataModel) tableName() string {
	return m.table
}
