// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysDictDataFieldNames          = builder.RawFieldNames(&SysDictData{})
	sysDictDataRows                = strings.Join(sysDictDataFieldNames, ",")
	sysDictDataRowsExpectAutoSet   = strings.Join(stringx.Remove(sysDictDataFieldNames, "`dict_id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	sysDictDataRowsWithPlaceHolder = strings.Join(stringx.Remove(sysDictDataFieldNames, "`dict_id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"

	cacheSysDictDataDictIdPrefix = "cache:sysDictData:dictId:"
)

type (
	sysDictDataModel interface {
		Insert(ctx context.Context, data *SysDictData) (sql.Result, error)
		FindOne(ctx context.Context, dictId int64) (*SysDictData, error)
		Update(ctx context.Context, data *SysDictData) error
		Delete(ctx context.Context, dictId int64) error
	}

	defaultSysDictDataModel struct {
		sqlc.CachedConn
		table string
	}

	SysDictData struct {
		DictId    int64     `db:"dict_id"`    // 编码
		DictType  string    `db:"dict_type"`  // 字典类型
		DictLabel string    `db:"dict_label"` // 数据标签
		DictValue string    `db:"dict_value"` // 数据键值
		DictSort  int64     `db:"dict_sort"`  // 显示排序
		Status    int64     `db:"status"`     // 状态
		Remark    string    `db:"remark"`     // 备注
		CreateBy  int64     `db:"create_by"`  // 创建者
		UpdateBy  int64     `db:"update_by"`  // 更新者
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newSysDictDataModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysDictDataModel {
	return &defaultSysDictDataModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_dict_data`",
	}
}

func (m *defaultSysDictDataModel) Delete(ctx context.Context, dictId int64) error {
	sysDictDataDictIdKey := fmt.Sprintf("%s%v", cacheSysDictDataDictIdPrefix, dictId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `dict_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, dictId)
	}, sysDictDataDictIdKey)
	return err
}

func (m *defaultSysDictDataModel) FindOne(ctx context.Context, dictId int64) (*SysDictData, error) {
	sysDictDataDictIdKey := fmt.Sprintf("%s%v", cacheSysDictDataDictIdPrefix, dictId)
	var resp SysDictData
	err := m.QueryRowCtx(ctx, &resp, sysDictDataDictIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `dict_id` = ? limit 1", sysDictDataRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dictId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysDictDataModel) Insert(ctx context.Context, data *SysDictData) (sql.Result, error) {
	sysDictDataDictIdKey := fmt.Sprintf("%s%v", cacheSysDictDataDictIdPrefix, data.DictId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysDictDataRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DictType, data.DictLabel, data.DictValue, data.DictSort, data.Status, data.Remark, data.CreateBy, data.UpdateBy)
	}, sysDictDataDictIdKey)
	return ret, err
}

func (m *defaultSysDictDataModel) Update(ctx context.Context, data *SysDictData) error {
	sysDictDataDictIdKey := fmt.Sprintf("%s%v", cacheSysDictDataDictIdPrefix, data.DictId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `dict_id` = ?", m.table, sysDictDataRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DictType, data.DictLabel, data.DictValue, data.DictSort, data.Status, data.Remark, data.CreateBy, data.UpdateBy, data.DictId)
	}, sysDictDataDictIdKey)
	return err
}

func (m *defaultSysDictDataModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSysDictDataDictIdPrefix, primary)
}

func (m *defaultSysDictDataModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `dict_id` = ? limit 1", sysDictDataRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysDictDataModel) tableName() string {
	return m.table
}
