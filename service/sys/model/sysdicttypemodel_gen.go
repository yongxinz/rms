// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysDictTypeFieldNames          = builder.RawFieldNames(&SysDictType{})
	sysDictTypeRows                = strings.Join(sysDictTypeFieldNames, ",")
	sysDictTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(sysDictTypeFieldNames, "`dict_id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	sysDictTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(sysDictTypeFieldNames, "`dict_id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"

	cacheSysDictTypeDictIdPrefix = "cache:sysDictType:dictId:"
)

type (
	sysDictTypeModel interface {
		Insert(ctx context.Context, data *SysDictType) (sql.Result, error)
		FindOne(ctx context.Context, dictId int64) (*SysDictType, error)
		Update(ctx context.Context, data *SysDictType) error
		Delete(ctx context.Context, dictId int64) error
	}

	defaultSysDictTypeModel struct {
		sqlc.CachedConn
		table string
	}

	SysDictType struct {
		DictId    int64          `db:"dict_id"`
		DictName  sql.NullString `db:"dict_name"`
		DictType  sql.NullString `db:"dict_type"`
		Status    sql.NullInt64  `db:"status"`
		Remark    sql.NullString `db:"remark"`
		CreateBy  sql.NullInt64  `db:"create_by"`  // 创建者
		UpdateBy  sql.NullInt64  `db:"update_by"`  // 更新者
		CreatedAt sql.NullTime   `db:"created_at"` // 创建时间
		UpdatedAt sql.NullTime   `db:"updated_at"` // 最后更新时间
		DeletedAt sql.NullTime   `db:"deleted_at"` // 删除时间
	}
)

func newSysDictTypeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysDictTypeModel {
	return &defaultSysDictTypeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_dict_type`",
	}
}

func (m *defaultSysDictTypeModel) Delete(ctx context.Context, dictId int64) error {
	sysDictTypeDictIdKey := fmt.Sprintf("%s%v", cacheSysDictTypeDictIdPrefix, dictId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `dict_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, dictId)
	}, sysDictTypeDictIdKey)
	return err
}

func (m *defaultSysDictTypeModel) FindOne(ctx context.Context, dictId int64) (*SysDictType, error) {
	sysDictTypeDictIdKey := fmt.Sprintf("%s%v", cacheSysDictTypeDictIdPrefix, dictId)
	var resp SysDictType
	err := m.QueryRowCtx(ctx, &resp, sysDictTypeDictIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `dict_id` = ? limit 1", sysDictTypeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, dictId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysDictTypeModel) Insert(ctx context.Context, data *SysDictType) (sql.Result, error) {
	sysDictTypeDictIdKey := fmt.Sprintf("%s%v", cacheSysDictTypeDictIdPrefix, data.DictId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, sysDictTypeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DictName, data.DictType, data.Status, data.Remark, data.CreateBy, data.UpdateBy, data.DeletedAt)
	}, sysDictTypeDictIdKey)
	return ret, err
}

func (m *defaultSysDictTypeModel) Update(ctx context.Context, data *SysDictType) error {
	sysDictTypeDictIdKey := fmt.Sprintf("%s%v", cacheSysDictTypeDictIdPrefix, data.DictId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `dict_id` = ?", m.table, sysDictTypeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DictName, data.DictType, data.Status, data.Remark, data.CreateBy, data.UpdateBy, data.DeletedAt, data.DictId)
	}, sysDictTypeDictIdKey)
	return err
}

func (m *defaultSysDictTypeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSysDictTypeDictIdPrefix, primary)
}

func (m *defaultSysDictTypeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `dict_id` = ? limit 1", sysDictTypeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysDictTypeModel) tableName() string {
	return m.table
}
