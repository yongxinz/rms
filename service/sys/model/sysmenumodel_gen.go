// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysMenuFieldNames          = builder.RawFieldNames(&SysMenu{})
	sysMenuRows                = strings.Join(sysMenuFieldNames, ",")
	sysMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(sysMenuFieldNames, "`menu_id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	sysMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(sysMenuFieldNames, "`menu_id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"

	cacheSysMenuMenuIdPrefix = "cache:sysMenu:menuId:"
)

type (
	sysMenuModel interface {
		Insert(ctx context.Context, data *SysMenu) (sql.Result, error)
		FindOne(ctx context.Context, menuId int64) (*SysMenu, error)
		Update(ctx context.Context, data *SysMenu) error
		Delete(ctx context.Context, menuId int64) error
	}

	defaultSysMenuModel struct {
		sqlc.CachedConn
		table string
	}

	SysMenu struct {
		MenuId     int64          `db:"menu_id"`
		MenuName   sql.NullString `db:"menu_name"`
		Title      sql.NullString `db:"title"`
		Icon       sql.NullString `db:"icon"`
		Path       sql.NullString `db:"path"`
		Paths      sql.NullString `db:"paths"`
		MenuType   sql.NullString `db:"menu_type"`
		Action     sql.NullString `db:"action"`
		Permission sql.NullString `db:"permission"`
		ParentId   sql.NullInt64  `db:"parent_id"`
		NoCache    sql.NullInt64  `db:"no_cache"`
		Breadcrumb sql.NullString `db:"breadcrumb"`
		Component  sql.NullString `db:"component"`
		Sort       sql.NullInt64  `db:"sort"`
		Visible    sql.NullString `db:"visible"`
		IsFrame    string         `db:"is_frame"`
		CreateBy   sql.NullInt64  `db:"create_by"`  // 创建者
		UpdateBy   sql.NullInt64  `db:"update_by"`  // 更新者
		CreatedAt  sql.NullTime   `db:"created_at"` // 创建时间
		UpdatedAt  sql.NullTime   `db:"updated_at"` // 最后更新时间
		DeletedAt  sql.NullTime   `db:"deleted_at"` // 删除时间
	}
)

func newSysMenuModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysMenuModel {
	return &defaultSysMenuModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_menu`",
	}
}

func (m *defaultSysMenuModel) Delete(ctx context.Context, menuId int64) error {
	sysMenuMenuIdKey := fmt.Sprintf("%s%v", cacheSysMenuMenuIdPrefix, menuId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `menu_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, menuId)
	}, sysMenuMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) FindOne(ctx context.Context, menuId int64) (*SysMenu, error) {
	sysMenuMenuIdKey := fmt.Sprintf("%s%v", cacheSysMenuMenuIdPrefix, menuId)
	var resp SysMenu
	err := m.QueryRowCtx(ctx, &resp, sysMenuMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `menu_id` = ? limit 1", sysMenuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, menuId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) Insert(ctx context.Context, data *SysMenu) (sql.Result, error) {
	sysMenuMenuIdKey := fmt.Sprintf("%s%v", cacheSysMenuMenuIdPrefix, data.MenuId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysMenuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MenuName, data.Title, data.Icon, data.Path, data.Paths, data.MenuType, data.Action, data.Permission, data.ParentId, data.NoCache, data.Breadcrumb, data.Component, data.Sort, data.Visible, data.IsFrame, data.CreateBy, data.UpdateBy, data.DeletedAt)
	}, sysMenuMenuIdKey)
	return ret, err
}

func (m *defaultSysMenuModel) Update(ctx context.Context, data *SysMenu) error {
	sysMenuMenuIdKey := fmt.Sprintf("%s%v", cacheSysMenuMenuIdPrefix, data.MenuId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `menu_id` = ?", m.table, sysMenuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MenuName, data.Title, data.Icon, data.Path, data.Paths, data.MenuType, data.Action, data.Permission, data.ParentId, data.NoCache, data.Breadcrumb, data.Component, data.Sort, data.Visible, data.IsFrame, data.CreateBy, data.UpdateBy, data.DeletedAt, data.MenuId)
	}, sysMenuMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSysMenuMenuIdPrefix, primary)
}

func (m *defaultSysMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `menu_id` = ? limit 1", sysMenuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysMenuModel) tableName() string {
	return m.table
}
