// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserFieldNames          = builder.RawFieldNames(&SysUser{})
	sysUserRows                = strings.Join(sysUserFieldNames, ",")
	sysUserRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserFieldNames, "`user_id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	sysUserRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserFieldNames, "`user_id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"

	cacheSysUserUserIdPrefix   = "cache:sysUser:userId:"
	cacheSysUserUsernamePrefix = "cache:sysUser:username:"
)

type (
	sysUserModel interface {
		Insert(ctx context.Context, data *SysUser) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*SysUser, error)
		FindOneByUsername(ctx context.Context, username string) (*SysUser, error)
		Update(ctx context.Context, data *SysUser) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultSysUserModel struct {
		sqlc.CachedConn
		table string
	}

	SysUser struct {
		UserId    int64          `db:"user_id"`    // 编码
		Username  string         `db:"username"`   // 用户名
		Password  string         `db:"password"`   // 密码
		NickName  sql.NullString `db:"nick_name"`  // 昵称
		Phone     sql.NullString `db:"phone"`      // 手机号
		RoleId    sql.NullInt64  `db:"role_id"`    // 角色ID
		Salt      sql.NullString `db:"salt"`       // 加盐
		Avatar    string         `db:"avatar"`     // 头像
		Sex       sql.NullString `db:"sex"`        // 性别
		Email     sql.NullString `db:"email"`      // 邮箱
		DeptId    sql.NullInt64  `db:"dept_id"`    // 部门
		PostId    sql.NullInt64  `db:"post_id"`    // 岗位
		Remark    sql.NullString `db:"remark"`     // 备注
		Status    sql.NullString `db:"status"`     // 状态
		CreateBy  sql.NullInt64  `db:"create_by"`  // 创建者
		UpdateBy  sql.NullInt64  `db:"update_by"`  // 更新者
		CreatedAt sql.NullTime   `db:"created_at"` // 创建时间
		UpdatedAt sql.NullTime   `db:"updated_at"` // 最后更新时间
		DeletedAt sql.NullTime   `db:"deleted_at"` // 删除时间
	}
)

func newSysUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysUserModel {
	return &defaultSysUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_user`",
	}
}

func (m *defaultSysUserModel) Delete(ctx context.Context, userId int64) error {
	data, err := m.FindOne(ctx, userId)
	if err != nil {
		return err
	}

	sysUserUserIdKey := fmt.Sprintf("%s%v", cacheSysUserUserIdPrefix, userId)
	sysUserUsernameKey := fmt.Sprintf("%s%v", cacheSysUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, sysUserUserIdKey, sysUserUsernameKey)
	return err
}

func (m *defaultSysUserModel) FindOne(ctx context.Context, userId int64) (*SysUser, error) {
	sysUserUserIdKey := fmt.Sprintf("%s%v", cacheSysUserUserIdPrefix, userId)
	var resp SysUser
	err := m.QueryRowCtx(ctx, &resp, sysUserUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", sysUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindOneByUsername(ctx context.Context, username string) (*SysUser, error) {
	sysUserUsernameKey := fmt.Sprintf("%s%v", cacheSysUserUsernamePrefix, username)
	var resp SysUser
	err := m.QueryRowIndexCtx(ctx, &resp, sysUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", sysUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.UserId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) Insert(ctx context.Context, data *SysUser) (sql.Result, error) {
	sysUserUserIdKey := fmt.Sprintf("%s%v", cacheSysUserUserIdPrefix, data.UserId)
	sysUserUsernameKey := fmt.Sprintf("%s%v", cacheSysUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.NickName, data.Phone, data.RoleId, data.Salt, data.Avatar, data.Sex, data.Email, data.DeptId, data.PostId, data.Remark, data.Status, data.CreateBy, data.UpdateBy, data.DeletedAt)
	}, sysUserUserIdKey, sysUserUsernameKey)
	return ret, err
}

func (m *defaultSysUserModel) Update(ctx context.Context, newData *SysUser) error {
	data, err := m.FindOne(ctx, newData.UserId)
	if err != nil {
		return err
	}

	sysUserUserIdKey := fmt.Sprintf("%s%v", cacheSysUserUserIdPrefix, data.UserId)
	sysUserUsernameKey := fmt.Sprintf("%s%v", cacheSysUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, sysUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Password, newData.NickName, newData.Phone, newData.RoleId, newData.Salt, newData.Avatar, newData.Sex, newData.Email, newData.DeptId, newData.PostId, newData.Remark, newData.Status, newData.CreateBy, newData.UpdateBy, newData.DeletedAt, newData.UserId)
	}, sysUserUserIdKey, sysUserUsernameKey)
	return err
}

func (m *defaultSysUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSysUserUserIdPrefix, primary)
}

func (m *defaultSysUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", sysUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysUserModel) tableName() string {
	return m.table
}
