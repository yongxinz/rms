// Code generated by goctl. DO NOT EDIT!
// Source: sys.proto

package server

import (
	"context"

	"rms/service/sys/rpc/internal/logic"
	"rms/service/sys/rpc/internal/svc"
	"rms/service/sys/rpc/sys"
)

type SysServer struct {
	svcCtx *svc.ServiceContext
	sys.UnimplementedSysServer
}

func NewSysServer(svcCtx *svc.ServiceContext) *SysServer {
	return &SysServer{
		svcCtx: svcCtx,
	}
}

func (s *SysServer) Login(ctx context.Context, in *sys.LoginRequest) (*sys.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *SysServer) UserInfo(ctx context.Context, in *sys.UserInfoReq) (*sys.UserInfoResp, error) {
	l := logic.NewUserInfoLogic(ctx, s.svcCtx)
	return l.UserInfo(in)
}

func (s *SysServer) SysConfig(ctx context.Context, in *sys.SysConfigReq) (*sys.SysConfigResp, error) {
	l := logic.NewSysConfigLogic(ctx, s.svcCtx)
	return l.SysConfig(in)
}

func (s *SysServer) ConfigPw(ctx context.Context, in *sys.ConfigPwReq) (*sys.ConfigPwResp, error) {
	l := logic.NewConfigPwLogic(ctx, s.svcCtx)
	return l.ConfigPw(in)
}

func (s *SysServer) UserList(ctx context.Context, in *sys.UserListReq) (*sys.UserListResp, error) {
	l := logic.NewUserListLogic(ctx, s.svcCtx)
	return l.UserList(in)
}

func (s *SysServer) MenuAdd(ctx context.Context, in *sys.MenuAddReq) (*sys.MenuAddResp, error) {
	l := logic.NewMenuAddLogic(ctx, s.svcCtx)
	return l.MenuAdd(in)
}

func (s *SysServer) MenuList(ctx context.Context, in *sys.MenuListReq) (*sys.MenuListResp, error) {
	l := logic.NewMenuListLogic(ctx, s.svcCtx)
	return l.MenuList(in)
}

func (s *SysServer) MenuUpdate(ctx context.Context, in *sys.MenuUpdateReq) (*sys.MenuUpdateResp, error) {
	l := logic.NewMenuUpdateLogic(ctx, s.svcCtx)
	return l.MenuUpdate(in)
}

func (s *SysServer) MenuRole(ctx context.Context, in *sys.MenuRoleReq) (*sys.MenuRoleResp, error) {
	l := logic.NewMenuRoleLogic(ctx, s.svcCtx)
	return l.MenuRole(in)
}

func (s *SysServer) DeepTree(ctx context.Context, in *sys.DeepTreeReq) (*sys.DeepTreeResp, error) {
	l := logic.NewDeepTreeLogic(ctx, s.svcCtx)
	return l.DeepTree(in)
}

func (s *SysServer) DictDataOp(ctx context.Context, in *sys.DictDataOpReq) (*sys.DictDataOpResp, error) {
	l := logic.NewDictDataOpLogic(ctx, s.svcCtx)
	return l.DictDataOp(in)
}
